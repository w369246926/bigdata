4.7.1.4.1.1 	获取今天的日期
date
date +%Y%m%d

4.7.1.4.1.2 	指定日期获取内容 -d或--date=
#获取指定日期的年月日格式输出
date -d "2014-11-12" +%Y%m%d
#获取指定日期的星期（周几）格式输出
date --date="2014-11-23" +%w
4.7.1.4.1.3 	日期加减 -d或--date==
#获取上周日期（day,month,year,hour）
date -d "-1 week" +%Y%m%d
#获取昨天日期
date -d '-1 day' "+%Y-%m-%d"
date --date="-24 hour" +%Y%m%d
日期格式化规则：
%a 当前域的星期缩写 (Sun..Sat)
%A 当前域的星期全写 (Sunday..Saturday)
%b 当前域的月份缩写(Jan..Dec)
%B 当前域的月份全称 (January..December)
%d 两位的天 (01..31)
%D 短时间格式 (mm/dd/yy)
%e 短格式天 ( 1..31)
%F 文件时间格式 same as %Y-%m-%d
%h same as %b
%H 24小时制的小时 (00..23)
%I 12小时制的小时 (01..12)
%j 一年中的第几天 (001..366)
%k 短格式24小时制的小时 ( 0..23)
%m 双位月份 (01..12)
%M 双位分钟 (00..59)
%r 12小时制的时间表示（时:分:秒,双位） time, 12-hour (hh:mm:ss [AP]M)
%R 24小时制的时间表示 （时:分,双位）time, 24-hour (hh:mm)
%s 自基础时间 1970-01-01 00:00:00 到当前时刻的秒数(a GNU extension)
%T 24小时制时间表示(hh:mm:ss)
%u 数字表示的星期（从星期一开始 1-7）
%x 本地日期格式 (mm/dd/yy)
%X 本地时间格式 (%H:%M:%S)
%y 两位的年(00..99)
%Y 年 (1970…)
4.7.1.4.2.1 	变量替换
在 bash shell 中，${}是用来作变量替换的。
一般情况下，$var与${var}是没有区别的，但是用${ }会比较精确的界定变量名称的范围。
A=Linux
echo $AB    #表示变量AB
echo ${A}B    #表示变量A后连接着B
4.7.1.4.2.2 	命令替换
在 bash shell 中，$( )与` `（反引号）都是用来作命令替换的。
命令替换与变量替换差不多，区别是一个为执行变量，一个为执行命令，先完成引号里的命令行，然后将其结果替换出来，再重组成新的命令行。
echo $(date "+%Y-%m-%d")    #2020-07-01
echo today is `date "+%Y-%m-%d"`     #today is 2020-07-01
4.7.1.4.2.3.1 	(())
双小括号命令是用来执行数学表达式的，可以在其中进行各种逻辑运算、数学运算，也支持更多的运算符（如++、--等）。
echo $(((5 * 2)))        #10
在(( )) 中的变量名称，可于其前面加 $ 符号来执行替换，也可以不用。
i=5
echo $(((i=$i*2)))                 #10
echo $(((i=i*2)))                 #20
4.7.1.4.2.3.2 	$(())
$((( )))的缩写。
echo $(((i*2)))          #40
echo $((i*2))           #40
shell脚本默认是按顺序串行执行的，使用&可以将一个命令放在后台运行，从而使shell脚本能够继续往后执行：
sleep 5 &
echo "done"
上面的脚本执行后会立即打印出"done"，sleep命令被扔给后台执行，不会阻塞脚本执行。

如果想要在进入下个循环前，必须等待上个后台命令执行完毕，可以使用wait命令：
sleep 5 &
wait
echo "done"
