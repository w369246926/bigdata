/* 
 * 为什么要对jvm做优化？
运行的应用“卡住了”，日志不输出，程序没有反应
服务器的CPU负载突然升高
在多线程应用下，如何分配线程的数量？
 * jvm 运行的三种参数
 * 标准参数 -help -version  :jvm的标准参数，一般都是很稳定的，在未来的JVM版本中不会改变，可以使用java -help检索出所有的标准参数。
 * -X参数 （非标准参数） -Xint -Xcomp  :jvm的-X参数是非标准参数，在不同版本的jvm中，参数可能会有所不同，可以通过java -X查看非标准参数。
 * -XX参数（使用率较高） -XX:newSize -XX:+UseSerialGC 
 *      -Xms与-Xmx分别是设置jvm的堆内存的初始大小和最大大小。
        -Xmx2048m：等价于-XX:MaxHeapSize，设置JVM最大堆内存为2048M。
        -Xms512m：等价于-XX:InitialHeapSize，设置JVM初始堆内存为512M。
 * 什么是垃圾回收？程序的运行必然需要申请内存资源，无效的对象资源如果不及时处理就会一直占有内存资源，最终将导致内存溢
出，所以对内存资源的管理是非常重要了。
 * 
 * 使用字节码的方式可以很好查看代码底层的执行，从而可以看出哪些实现效率高，哪些实现效率低。可以更好的对
我们的代码做优化。让程序执行效率更高。
 * 调用方法时传递的参数以及在调用中创建的临时变量都保存在栈中速度较快，其他变量，如静态变量、实例变量
等，都在堆中创建，速度较慢。另外，栈中创建的变量，随着方法的运行结束，这些内容就没了，不需要额外的垃
圾回收。
 * 
 * 异常不应该用来控制程序流程
 * 不要将数组声明为public static final
 * 不要创建一些不使用的对象，不要导入一些不使用的类
 * 程序运行过程中避免使用反射
 * 使用数据库连接池和线程池
 * 容器初始化时尽可能指定长度
 * 
 * ArrayList随机遍历快，LinkedList添加删除快
 * 使用Entry遍历Map
 * 
 * 
 * 
 * 
 */
